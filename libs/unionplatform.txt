//RoomManager
RoomManager.prototype.createRoom = function (roomID, roomSettings, attributes, modules)		//create room
RoomManager.prototype.sendMessage = function (messageName, rooms, includeSelf, filters)		//send message
RoomManager.prototype.getAllRooms = function ()					//get rooms
RoomManager.prototype.getRooms = function ()					//get rooms
RoomManager.prototype.getRoom = function (roomID)				//get one room
RoomManager.prototype.getNumRooms = function (qualifier)			//get rooms count
RoomManager.prototype.observeRoom = function (roomID, password, pdateLevels)
RoomManager.prototype.watchForRooms = function (roomQualifier)
RoomManager.prototype.stopWatchingForRooms = function (roomQualifier)
RoomManager.prototype.isWatchingQualifier = function (qualifier)
RoomManager.prototype.joinRoom = function (roomID, password, updateLevels)
RoomManager.prototype.hasCachedRoom = function (roomID)
RoomManager.prototype.disposeCachedRooms = function ()
RoomManager.prototype.roomIsKnown = function (roomID)
RoomManager.prototype.getRoomIDs = function ()
RoomManager.prototype.getRoomsWithQualifier = function (qualifier)
RoomManager.prototype.getRoomClassRegistry = function ()
RoomManager.prototype.clientIsKnown = function (clientID)

//rooms
Room.prototype.join = function (password, updateLevels)				//join room
Room.prototype.leave = function ()						//leave room
Room.prototype.setRoomID = function (roomID)
Room.prototype.getRoomID = function ()
Room.prototype.getSimpleRoomID = function ()
Room.prototype.getQualifier = function ()
Room.prototype.sendMessage = function (messageName, includeSelf, filters)

//listeners
addEventListener(type, listener);
removeEventListener(type, listener);
Room.prototype.addMessageListener = function (message, listener, thisArg)	//add listener
Room.prototype.removeMessageListener = function (message, listener)		//removes listener
Room.prototype.hasMessageListener = function (message, listener)

//members
Room.prototype.getNumOccupants = function ()					//get users
Room.prototype.removeOccupant = function (clientID)
Room.prototype.addOccupant = function (client)
Room.prototype.getOccupantIDs = function ()
Room.prototype.getOccupants = function ()
Room.prototype.clientIsInRoom = function (clientID)

//misc
Room.prototype.getSyncState = function ()
Room.prototype.setUpdateLevels = function (updateLevels)
Room.prototype.observe = function (password, updateLevels)

//shut down room
try{
	Room room = roomContext.getServer().getRoom("mainChessRoom");
	room.shutdownRoom();
	} 
catch (RoomNotFoundException e){}

//leave room
var new_room = "chatRoom_private2";
if(ROOM_NAME!=new_room){
	//leave
	chatRoom.removeEventListener(net.user1.orbiter.RoomEvent.JOIN, joinRoomListener);
	chatRoom.removeEventListener(net.user1.orbiter.RoomEvent.ADD_OCCUPANT, addOccupantListener);
	chatRoom.removeEventListener(net.user1.orbiter.RoomEvent.REMOVE_OCCUPANT, removeOccupantListener);
	chatRoom.removeMessageListener("CHAT_MESSAGE", chatMessageListener);
	chatRoom.leave();	

	//new
	ROOM_NAME = new_room;
	chatRoom = orbiter.getRoomManager().createRoom(ROOM_NAME);
	chatRoom.addEventListener(net.user1.orbiter.RoomEvent.JOIN, joinRoomListener);
	chatRoom.addEventListener(net.user1.orbiter.RoomEvent.ADD_OCCUPANT, addOccupantListener);
	chatRoom.addEventListener(net.user1.orbiter.RoomEvent.REMOVE_OCCUPANT, removeOccupantListener);  
	chatRoom.addMessageListener("CHAT_MESSAGE", chatMessageListener);
	chatRoom.join();
	}
